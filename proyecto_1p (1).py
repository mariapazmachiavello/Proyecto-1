# -*- coding: utf-8 -*-
"""Proyecto.1p

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18DOkrckjqLc-gXMkYdlvdEt_7P75dJ6J
"""

!git clone https://github.com/hchocobar/ucu_pad_project_2023_01.git

# • Utilizando expresiones regulares debes encontrar el año, extraerlo y mostrarlo.
import os
import re

base_dir = "/content/ucu_pad_project_2023_01/data"
nombres_archivos = ["baby1990.html", "baby1992.html", "baby1994.html", "baby1996.html", "baby1998.html", "baby2000.html", "baby2002.html", "baby2004.html", "baby2006.html", "baby2008.html"]

for nombre_archivo in nombres_archivos:
    ruta_completa = os.path.join(base_dir, nombre_archivo)

    with open(ruta_completa, 'r') as archivo:
        texto = archivo.read()

    # Encontrar y extraer los números
    numeros = re.findall('>Popularity in (\d+)</h3>', texto)

    # Si se encontraron números, imprimir cada uno con el nombre del archivo
    if numeros:
        for numero in numeros:
            print(f"Archivo: {nombre_archivo}, Número: {numero}")
    else:
        print(f"No se encontraron números en el archivo {nombre_archivo}.")

#  Extrae los nombres de niños y de niñas con el correspondiente número que ocupan en el ranking y muéstralos.
import os
import re

base_dir = "/content/ucu_pad_project_2023_01/data"
nombres_archivos = ["baby1990.html", "baby1992.html", "baby1994.html", "baby1996.html", "baby1998.html", "baby2000.html", "baby2002.html", "baby2004.html", "baby2006.html", "baby2008.html"]

for nombre_archivo in nombres_archivos:
    ruta_completa = os.path.join(base_dir, nombre_archivo)

    with open(ruta_completa, 'r') as archivo:
        texto = archivo.read()

    # Encontrar números de ranking y nombres entre las etiquetas <td>
    # ([A-Za-z]+) es útil para extraer nombres o palabras que consisten en letras del alfabeto.
    datos = re.findall(r'<td>(\d+)</td><td>([A-Za-z]+)</td>', texto)

    if datos:
        for ranking, nombre in datos:
            print(f"Ranking en {nombre_archivo}: {ranking}, Nombre: {nombre}")
    else:
        print(f"No se encontraron datos en el archivo {nombre_archivo}.")

# Guarda los nombres (individuales) y su ranking en un diccionario e imprímelos
diccionario_nombres = {}

for nombre_archivo in nombres_archivos:
    ruta_completa = os.path.join(base_dir, nombre_archivo)

    with open(ruta_completa, 'r') as archivo:
        texto = archivo.read()

    # Encontrar números de ranking y nombres entre las etiquetas <td>
    datos = re.findall(r'<td>(\d+)</td><td>([A-Za-z]+)</td>', texto)

    if datos:
        for ranking, nombre in datos:
            # Se covierte el ranking a entero
            ranking = int(ranking)

            # Se agrega el nombre y su ranking al diccionario
            diccionario_nombres[nombre] = ranking

# Se utiliza .items para obtener (pares clave-valor) en un diccionario
# Imprime
for nombre, ranking in diccionario_nombres.items():
    print(f"Nombre: {nombre}, Ranking: {ranking}")

# Crear una lista con los nombres ordenados alfabéticamente y muéstrala
# Sorted para ordenar la secuencia
nombres_ordenados = sorted(diccionario_nombres.keys())

# Imprimir la lista
for nombre in nombres_ordenados:
    print(nombre)

# Crear una lista con formato determinado
año = "1990"

baby = [f"Año: {año}"]

# Agregar los nombres y rankings ordenados alfabéticamente
for nombre, ranking in sorted(diccionario_nombres.items()):
    baby.append(f"{nombre} (En posicion {ranking})")

# Imprimir lista
for elemento in baby:
    print(elemento)